<?php

/**
 * Implements hook_menu().
 *
 * @return array
 */
function views_style_autoload_menu() {
  $items['admin/structure/views/view/%views_ui_cache/style_autoload'] = array(
    'title'            => 'Style autoload',
    'access arguments' => array('administer views style autoload'),
    'page callback'    => 'views_style_autoload_view_page',
    'page arguments'   => array('views', 4),
    'type'             => MENU_VISIBLE_IN_BREADCRUMB,
    'file'             => 'views_style_autoload.pages.inc',
  );

  $items['admin/config/development/views_style_autoload_settings'] = array(
    'title'            => 'Style autoload global settings',
    'access arguments' => array('configure views style autoload'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('views_style_autoload_settings'),
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'views_style_autoload.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function views_style_autoload_permission() {
  return array(
    'administer views style autoload' => array(
      'title'       => t('Administer views style autoload'),
      'description' => t('Perform administration tasks for views style autoload.'),
    ),
    'configure views style autoload'  => array(
      'title'       => t('Configure views style autoload'),
      'description' => t('Perform configuration tasks for views style autoload.'),
    ),
  );
}

/**
 * Implements hook_views_ui_display_top_links_alter().
 *
 * Adds link to views autoload settings form.
 */
function views_style_autoload_views_ui_display_top_links_alter(&$links, $view, $display_id) {
  $links['style_autoload'] = array(
    'title' => t('style autoload'),
    'href'  => "admin/structure/views/view/$view->name/style_autoload"
  );
}

/**
 * Implements hook_views_pre_view().
 *
 * Add styles to view.
 */
function views_style_autoload_views_pre_view(&$view, &$display_id, &$args) {
  $show_debug_information = variable_get('views_style_autoload_settings_debug', 0);
  if ($show_debug_information == 1) {
    $message = t('Used view: @view_name with display: @display.', array(
      '@view_name' => $view->name,
      '@display'   => $display_id,
    ));
    drupal_set_message($message, 'status', FALSE);
  }

  $used_views = variable_get('views_style_autoload_used_views', array());

  if (!empty($view->name) && in_array($view->name, array_keys($used_views))) {
    $views_machine_name = $view->name;
    $views_machine_name = views_style_autoload_prepare_name($views_machine_name);

    // load global style.
    views_style_autoload_load_style($views_machine_name, 'views');

    // Load style for current display.
    $views_display_id = views_style_autoload_prepare_name($display_id);
    if (!empty($views_machine_name) && !empty($views_display_id)) {
      $current_view_style = $views_machine_name . '-' . $views_display_id;
      views_style_autoload_load_style($current_view_style, 'views');
    }

    // Add classes to view.
    $views_classes = $view->display_handler->get_option('css_class');
    if (!empty($views_machine_name)) {
      $views_classes .= ' ' . $views_machine_name;
    }
    if (!empty($current_view_style)) {
      $views_classes .= ' ' . $current_view_style;
    }
    $view->display_handler->set_option('css_class', $views_classes);
  }
}

/**
 * Load style.
 *
 * @param $file_name
 */
function views_style_autoload_load_style($file_name, $type) {
  // Define path
  static $style_path;
  if ($style_path == FALSE) {
    $style_path = $files_path = variable_get('views_style_autoload_files_path', '');
  }

  // Add file.
  $file_path = $style_path . '/' . $type . '/' . $file_name . '.css';
  if (file_exists($file_path)) {
    drupal_add_css($file_path);
  }

  // Show debug information.
  $show_debug_information = variable_get('views_style_autoload_settings_debug', 0);
  if ($show_debug_information == 1) {
    if (file_exists($file_path)) {
      $message = t('Loaded file: @style_path', array(
        '@style_path' => $file_path,
      ));
      $type = 'status';
    }
    else {
      $message = t('You can use: @style_path', array(
        '@style_path' => $file_path,
      ));
      $type = 'warning';
    }
    drupal_set_message($message, $type, FALSE);
  }
}

function views_style_autoload_prepare_name($name) {
  $name = str_replace('_', '-', $name);
  return $name;
}